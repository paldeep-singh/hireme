// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { companyId, type CompanyId } from './Company';
import { contractType, type default as ContractType } from './ContractType';
import { Range } from 'postgres-range';
import { IPostgresInterval } from 'postgres-interval';
import { z } from 'zod';

/** Identifier type for hire_me.role */
export type RoleId = number & { __brand: 'RoleId' };

/** Represents the table hire_me.role */
export default interface Role {
  id: RoleId;

  company_id: CompanyId;

  title: string;

  location: string;

  on_site: boolean;

  hybrid: boolean;

  remote: boolean;

  job_type: ContractType;

  salary_range: Range<number> | null;

  salary_includes_super: boolean | null;

  term: IPostgresInterval | null;

  office_days: Range<number> | null;
}

/** Represents the initializer for the table hire_me.role */
export interface RoleInitializer {
  company_id: CompanyId;

  title: string;

  location: string;

  on_site: boolean;

  hybrid: boolean;

  remote: boolean;

  job_type: ContractType;

  salary_range?: Range<number> | null;

  salary_includes_super?: boolean | null;

  term?: IPostgresInterval | null;

  office_days?: Range<number> | null;
}

/** Represents the mutator for the table hire_me.role */
export interface RoleMutator {
  company_id?: CompanyId;

  title?: string;

  location?: string;

  on_site?: boolean;

  hybrid?: boolean;

  remote?: boolean;

  job_type?: ContractType;

  salary_range?: Range<number> | null;

  salary_includes_super?: boolean | null;

  term?: IPostgresInterval | null;

  office_days?: Range<number> | null;
}

export const roleId = z.number() as unknown as z.Schema<RoleId>;

export const role = z.object({
  id: roleId,
  company_id: companyId,
  title: z.string(),
  location: z.string(),
  on_site: z.boolean(),
  hybrid: z.boolean(),
  remote: z.boolean(),
  job_type: contractType,
  salary_range: z.string().nullable(),
  salary_includes_super: z.boolean().nullable(),
  term: z.object({
        years: z.number().optional(),
        months: z.number().optional(),
        days: z.number().optional(),
        hours: z.number().optional(),
        minutes: z.number().optional(), 
        seconds: z.number().optional(),
        milliseconds: z.number().optional()}).nullable(),
  office_days: z.string().nullable(),
}) as unknown as z.Schema<Role>;

export const roleInitializer = z.object({
  id: roleId.optional(),
  company_id: companyId,
  title: z.string(),
  location: z.string(),
  on_site: z.boolean(),
  hybrid: z.boolean(),
  remote: z.boolean(),
  job_type: contractType,
  salary_range: z.string().optional().nullable(),
  salary_includes_super: z.boolean().optional().nullable(),
  term: z.object({
        years: z.number().optional(),
        months: z.number().optional(),
        days: z.number().optional(),
        hours: z.number().optional(),
        minutes: z.number().optional(), 
        seconds: z.number().optional(),
        milliseconds: z.number().optional()}).optional().nullable(),
  office_days: z.string().optional().nullable(),
}) as unknown as z.Schema<RoleInitializer>;

export const roleMutator = z.object({
  id: roleId.optional(),
  company_id: companyId.optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  on_site: z.boolean().optional(),
  hybrid: z.boolean().optional(),
  remote: z.boolean().optional(),
  job_type: contractType.optional(),
  salary_range: z.string().optional().nullable(),
  salary_includes_super: z.boolean().optional().nullable(),
  term: z.object({
        years: z.number().optional(),
        months: z.number().optional(),
        days: z.number().optional(),
        hours: z.number().optional(),
        minutes: z.number().optional(), 
        seconds: z.number().optional(),
        milliseconds: z.number().optional()}).optional().nullable(),
  office_days: z.string().optional().nullable(),
}) as unknown as z.Schema<RoleMutator>;
