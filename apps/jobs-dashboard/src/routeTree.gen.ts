/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardRolesImport } from './routes/dashboard/roles'
import { Route as DashboardRoleRoleIdImport } from './routes/dashboard/role.$roleId'
import { Route as DashboardAddRoleRoleImport } from './routes/dashboard/add-role/role'
import { Route as DashboardAddRoleCompanyImport } from './routes/dashboard/add-role/company'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardRolesRoute = DashboardRolesImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardRoleRoleIdRoute = DashboardRoleRoleIdImport.update({
  id: '/role/$roleId',
  path: '/role/$roleId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardAddRoleRoleRoute = DashboardAddRoleRoleImport.update({
  id: '/add-role/role',
  path: '/add-role/role',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardAddRoleCompanyRoute = DashboardAddRoleCompanyImport.update({
  id: '/add-role/company',
  path: '/add-role/company',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/roles': {
      id: '/dashboard/roles'
      path: '/roles'
      fullPath: '/dashboard/roles'
      preLoaderRoute: typeof DashboardRolesImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/add-role/company': {
      id: '/dashboard/add-role/company'
      path: '/add-role/company'
      fullPath: '/dashboard/add-role/company'
      preLoaderRoute: typeof DashboardAddRoleCompanyImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/add-role/role': {
      id: '/dashboard/add-role/role'
      path: '/add-role/role'
      fullPath: '/dashboard/add-role/role'
      preLoaderRoute: typeof DashboardAddRoleRoleImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/role/$roleId': {
      id: '/dashboard/role/$roleId'
      path: '/role/$roleId'
      fullPath: '/dashboard/role/$roleId'
      preLoaderRoute: typeof DashboardRoleRoleIdImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardRolesRoute: typeof DashboardRolesRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardAddRoleCompanyRoute: typeof DashboardAddRoleCompanyRoute
  DashboardAddRoleRoleRoute: typeof DashboardAddRoleRoleRoute
  DashboardRoleRoleIdRoute: typeof DashboardRoleRoleIdRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardRolesRoute: DashboardRolesRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardAddRoleCompanyRoute: DashboardAddRoleCompanyRoute,
  DashboardAddRoleRoleRoute: DashboardAddRoleRoleRoute,
  DashboardRoleRoleIdRoute: DashboardRoleRoleIdRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/roles': typeof DashboardRolesRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/add-role/company': typeof DashboardAddRoleCompanyRoute
  '/dashboard/add-role/role': typeof DashboardAddRoleRoleRoute
  '/dashboard/role/$roleId': typeof DashboardRoleRoleIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard/roles': typeof DashboardRolesRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/add-role/company': typeof DashboardAddRoleCompanyRoute
  '/dashboard/add-role/role': typeof DashboardAddRoleRoleRoute
  '/dashboard/role/$roleId': typeof DashboardRoleRoleIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/roles': typeof DashboardRolesRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/add-role/company': typeof DashboardAddRoleCompanyRoute
  '/dashboard/add-role/role': typeof DashboardAddRoleRoleRoute
  '/dashboard/role/$roleId': typeof DashboardRoleRoleIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/roles'
    | '/dashboard/'
    | '/dashboard/add-role/company'
    | '/dashboard/add-role/role'
    | '/dashboard/role/$roleId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard/roles'
    | '/dashboard'
    | '/dashboard/add-role/company'
    | '/dashboard/add-role/role'
    | '/dashboard/role/$roleId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/roles'
    | '/dashboard/'
    | '/dashboard/add-role/company'
    | '/dashboard/add-role/role'
    | '/dashboard/role/$roleId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/roles",
        "/dashboard/",
        "/dashboard/add-role/company",
        "/dashboard/add-role/role",
        "/dashboard/role/$roleId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/dashboard/roles": {
      "filePath": "dashboard/roles.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/add-role/company": {
      "filePath": "dashboard/add-role/company.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/add-role/role": {
      "filePath": "dashboard/add-role/role.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/role/$roleId": {
      "filePath": "dashboard/role.$roleId.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
