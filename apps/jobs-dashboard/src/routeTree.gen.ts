/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as authedRouteImport } from './routes/(authed)/route'
import { Route as IndexImport } from './routes/index'
import { Route as authedRolesImport } from './routes/(authed)/roles'
import { Route as authedAddRoleRouteImport } from './routes/(authed)/add-role/route'
import { Route as authedRoleRoleIdImport } from './routes/(authed)/role.$roleId'
import { Route as authedAddRoleSalaryImport } from './routes/(authed)/add-role/salary'
import { Route as authedAddRoleRoleImport } from './routes/(authed)/add-role/role'
import { Route as authedAddRoleRequirementsImport } from './routes/(authed)/add-role/requirements'
import { Route as authedAddRoleLocationImport } from './routes/(authed)/add-role/location'
import { Route as authedAddRoleCompanyImport } from './routes/(authed)/add-role/company'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authedRouteRoute = authedRouteImport.update({
  id: '/(authed)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authedRolesRoute = authedRolesImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => authedRouteRoute,
} as any)

const authedAddRoleRouteRoute = authedAddRoleRouteImport.update({
  id: '/add-role',
  path: '/add-role',
  getParentRoute: () => authedRouteRoute,
} as any)

const authedRoleRoleIdRoute = authedRoleRoleIdImport.update({
  id: '/role/$roleId',
  path: '/role/$roleId',
  getParentRoute: () => authedRouteRoute,
} as any)

const authedAddRoleSalaryRoute = authedAddRoleSalaryImport.update({
  id: '/salary',
  path: '/salary',
  getParentRoute: () => authedAddRoleRouteRoute,
} as any)

const authedAddRoleRoleRoute = authedAddRoleRoleImport.update({
  id: '/role',
  path: '/role',
  getParentRoute: () => authedAddRoleRouteRoute,
} as any)

const authedAddRoleRequirementsRoute = authedAddRoleRequirementsImport.update({
  id: '/requirements',
  path: '/requirements',
  getParentRoute: () => authedAddRoleRouteRoute,
} as any)

const authedAddRoleLocationRoute = authedAddRoleLocationImport.update({
  id: '/location',
  path: '/location',
  getParentRoute: () => authedAddRoleRouteRoute,
} as any)

const authedAddRoleCompanyRoute = authedAddRoleCompanyImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => authedAddRoleRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(authed)': {
      id: '/(authed)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authedRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/(authed)/add-role': {
      id: '/(authed)/add-role'
      path: '/add-role'
      fullPath: '/add-role'
      preLoaderRoute: typeof authedAddRoleRouteImport
      parentRoute: typeof authedRouteImport
    }
    '/(authed)/roles': {
      id: '/(authed)/roles'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof authedRolesImport
      parentRoute: typeof authedRouteImport
    }
    '/(authed)/add-role/company': {
      id: '/(authed)/add-role/company'
      path: '/company'
      fullPath: '/add-role/company'
      preLoaderRoute: typeof authedAddRoleCompanyImport
      parentRoute: typeof authedAddRoleRouteImport
    }
    '/(authed)/add-role/location': {
      id: '/(authed)/add-role/location'
      path: '/location'
      fullPath: '/add-role/location'
      preLoaderRoute: typeof authedAddRoleLocationImport
      parentRoute: typeof authedAddRoleRouteImport
    }
    '/(authed)/add-role/requirements': {
      id: '/(authed)/add-role/requirements'
      path: '/requirements'
      fullPath: '/add-role/requirements'
      preLoaderRoute: typeof authedAddRoleRequirementsImport
      parentRoute: typeof authedAddRoleRouteImport
    }
    '/(authed)/add-role/role': {
      id: '/(authed)/add-role/role'
      path: '/role'
      fullPath: '/add-role/role'
      preLoaderRoute: typeof authedAddRoleRoleImport
      parentRoute: typeof authedAddRoleRouteImport
    }
    '/(authed)/add-role/salary': {
      id: '/(authed)/add-role/salary'
      path: '/salary'
      fullPath: '/add-role/salary'
      preLoaderRoute: typeof authedAddRoleSalaryImport
      parentRoute: typeof authedAddRoleRouteImport
    }
    '/(authed)/role/$roleId': {
      id: '/(authed)/role/$roleId'
      path: '/role/$roleId'
      fullPath: '/role/$roleId'
      preLoaderRoute: typeof authedRoleRoleIdImport
      parentRoute: typeof authedRouteImport
    }
  }
}

// Create and export the route tree

interface authedAddRoleRouteRouteChildren {
  authedAddRoleCompanyRoute: typeof authedAddRoleCompanyRoute
  authedAddRoleLocationRoute: typeof authedAddRoleLocationRoute
  authedAddRoleRequirementsRoute: typeof authedAddRoleRequirementsRoute
  authedAddRoleRoleRoute: typeof authedAddRoleRoleRoute
  authedAddRoleSalaryRoute: typeof authedAddRoleSalaryRoute
}

const authedAddRoleRouteRouteChildren: authedAddRoleRouteRouteChildren = {
  authedAddRoleCompanyRoute: authedAddRoleCompanyRoute,
  authedAddRoleLocationRoute: authedAddRoleLocationRoute,
  authedAddRoleRequirementsRoute: authedAddRoleRequirementsRoute,
  authedAddRoleRoleRoute: authedAddRoleRoleRoute,
  authedAddRoleSalaryRoute: authedAddRoleSalaryRoute,
}

const authedAddRoleRouteRouteWithChildren =
  authedAddRoleRouteRoute._addFileChildren(authedAddRoleRouteRouteChildren)

interface authedRouteRouteChildren {
  authedAddRoleRouteRoute: typeof authedAddRoleRouteRouteWithChildren
  authedRolesRoute: typeof authedRolesRoute
  authedRoleRoleIdRoute: typeof authedRoleRoleIdRoute
}

const authedRouteRouteChildren: authedRouteRouteChildren = {
  authedAddRoleRouteRoute: authedAddRoleRouteRouteWithChildren,
  authedRolesRoute: authedRolesRoute,
  authedRoleRoleIdRoute: authedRoleRoleIdRoute,
}

const authedRouteRouteWithChildren = authedRouteRoute._addFileChildren(
  authedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof authedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/add-role': typeof authedAddRoleRouteRouteWithChildren
  '/roles': typeof authedRolesRoute
  '/add-role/company': typeof authedAddRoleCompanyRoute
  '/add-role/location': typeof authedAddRoleLocationRoute
  '/add-role/requirements': typeof authedAddRoleRequirementsRoute
  '/add-role/role': typeof authedAddRoleRoleRoute
  '/add-role/salary': typeof authedAddRoleSalaryRoute
  '/role/$roleId': typeof authedRoleRoleIdRoute
}

export interface FileRoutesByTo {
  '/': typeof authedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/add-role': typeof authedAddRoleRouteRouteWithChildren
  '/roles': typeof authedRolesRoute
  '/add-role/company': typeof authedAddRoleCompanyRoute
  '/add-role/location': typeof authedAddRoleLocationRoute
  '/add-role/requirements': typeof authedAddRoleRequirementsRoute
  '/add-role/role': typeof authedAddRoleRoleRoute
  '/add-role/salary': typeof authedAddRoleSalaryRoute
  '/role/$roleId': typeof authedRoleRoleIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(authed)': typeof authedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/(authed)/add-role': typeof authedAddRoleRouteRouteWithChildren
  '/(authed)/roles': typeof authedRolesRoute
  '/(authed)/add-role/company': typeof authedAddRoleCompanyRoute
  '/(authed)/add-role/location': typeof authedAddRoleLocationRoute
  '/(authed)/add-role/requirements': typeof authedAddRoleRequirementsRoute
  '/(authed)/add-role/role': typeof authedAddRoleRoleRoute
  '/(authed)/add-role/salary': typeof authedAddRoleSalaryRoute
  '/(authed)/role/$roleId': typeof authedRoleRoleIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/add-role'
    | '/roles'
    | '/add-role/company'
    | '/add-role/location'
    | '/add-role/requirements'
    | '/add-role/role'
    | '/add-role/salary'
    | '/role/$roleId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/add-role'
    | '/roles'
    | '/add-role/company'
    | '/add-role/location'
    | '/add-role/requirements'
    | '/add-role/role'
    | '/add-role/salary'
    | '/role/$roleId'
  id:
    | '__root__'
    | '/'
    | '/(authed)'
    | '/login'
    | '/(authed)/add-role'
    | '/(authed)/roles'
    | '/(authed)/add-role/company'
    | '/(authed)/add-role/location'
    | '/(authed)/add-role/requirements'
    | '/(authed)/add-role/role'
    | '/(authed)/add-role/salary'
    | '/(authed)/role/$roleId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authedRouteRoute: typeof authedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authedRouteRoute: authedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(authed)",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(authed)": {
      "filePath": "(authed)/route.tsx",
      "children": [
        "/(authed)/add-role",
        "/(authed)/roles",
        "/(authed)/role/$roleId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/(authed)/add-role": {
      "filePath": "(authed)/add-role/route.tsx",
      "parent": "/(authed)",
      "children": [
        "/(authed)/add-role/company",
        "/(authed)/add-role/location",
        "/(authed)/add-role/requirements",
        "/(authed)/add-role/role",
        "/(authed)/add-role/salary"
      ]
    },
    "/(authed)/roles": {
      "filePath": "(authed)/roles.tsx",
      "parent": "/(authed)"
    },
    "/(authed)/add-role/company": {
      "filePath": "(authed)/add-role/company.tsx",
      "parent": "/(authed)/add-role"
    },
    "/(authed)/add-role/location": {
      "filePath": "(authed)/add-role/location.tsx",
      "parent": "/(authed)/add-role"
    },
    "/(authed)/add-role/requirements": {
      "filePath": "(authed)/add-role/requirements.tsx",
      "parent": "/(authed)/add-role"
    },
    "/(authed)/add-role/role": {
      "filePath": "(authed)/add-role/role.tsx",
      "parent": "/(authed)/add-role"
    },
    "/(authed)/add-role/salary": {
      "filePath": "(authed)/add-role/salary.tsx",
      "parent": "/(authed)/add-role"
    },
    "/(authed)/role/$roleId": {
      "filePath": "(authed)/role.$roleId.tsx",
      "parent": "/(authed)"
    }
  }
}
ROUTE_MANIFEST_END */
