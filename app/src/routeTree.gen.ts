/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AdminDashboardIndexImport } from "./routes/admin/dashboard/index";
import { Route as AdminDashboardRouteImport } from "./routes/admin/dashboard/route";
import { Route as AdminLoginImport } from "./routes/admin/login";
import { Route as IndexImport } from "./routes/index";
import { Route as WhyImport } from "./routes/why";

// Create/Update Routes./routes/admin/dashboard/route

const WhyRoute = WhyImport.update({
	id: "/why",
	path: "/why",
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any);

const AdminLoginRoute = AdminLoginImport.update({
	id: "/admin/login",
	path: "/admin/login",
	getParentRoute: () => rootRoute,
} as any);

const AdminDashboardRouteRoute = AdminDashboardRouteImport.update({
	id: "/admin/dashboard",
	path: "/admin/dashboard",
	getParentRoute: () => rootRoute,
} as any);

const AdminDashboardIndexRoute = AdminDashboardIndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => AdminDashboardRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		"/why": {
			id: "/why";
			path: "/why";
			fullPath: "/why";
			preLoaderRoute: typeof WhyImport;
			parentRoute: typeof rootRoute;
		};
		"/admin/dashboard": {
			id: "/admin/dashboard";
			path: "/admin/dashboard";
			fullPath: "/admin/dashboard";
			preLoaderRoute: typeof AdminDashboardRouteImport;
			parentRoute: typeof rootRoute;
		};
		"/admin/login": {
			id: "/admin/login";
			path: "/admin/login";
			fullPath: "/admin/login";
			preLoaderRoute: typeof AdminLoginImport;
			parentRoute: typeof rootRoute;
		};
		"/admin/dashboard/": {
			id: "/admin/dashboard/";
			path: "/";
			fullPath: "/admin/dashboard/";
			preLoaderRoute: typeof AdminDashboardIndexImport;
			parentRoute: typeof AdminDashboardRouteImport;
		};
	}
}

// Create and export the route tree

interface AdminDashboardRouteRouteChildren {
	AdminDashboardIndexRoute: typeof AdminDashboardIndexRoute;
}

const AdminDashboardRouteRouteChildren: AdminDashboardRouteRouteChildren = {
	AdminDashboardIndexRoute: AdminDashboardIndexRoute,
};

const AdminDashboardRouteRouteWithChildren =
	AdminDashboardRouteRoute._addFileChildren(AdminDashboardRouteRouteChildren);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/why": typeof WhyRoute;
	"/admin/dashboard": typeof AdminDashboardRouteRouteWithChildren;
	"/admin/login": typeof AdminLoginRoute;
	"/admin/dashboard/": typeof AdminDashboardIndexRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/why": typeof WhyRoute;
	"/admin/login": typeof AdminLoginRoute;
	"/admin/dashboard": typeof AdminDashboardIndexRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexRoute;
	"/why": typeof WhyRoute;
	"/admin/dashboard": typeof AdminDashboardRouteRouteWithChildren;
	"/admin/login": typeof AdminLoginRoute;
	"/admin/dashboard/": typeof AdminDashboardIndexRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| "/"
		| "/why"
		| "/admin/dashboard"
		| "/admin/login"
		| "/admin/dashboard/";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/why" | "/admin/login" | "/admin/dashboard";
	id:
		| "__root__"
		| "/"
		| "/why"
		| "/admin/dashboard"
		| "/admin/login"
		| "/admin/dashboard/";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	WhyRoute: typeof WhyRoute;
	AdminDashboardRouteRoute: typeof AdminDashboardRouteRouteWithChildren;
	AdminLoginRoute: typeof AdminLoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	WhyRoute: WhyRoute,
	AdminDashboardRouteRoute: AdminDashboardRouteRouteWithChildren,
	AdminLoginRoute: AdminLoginRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/why",
        "/admin/dashboard",
        "/admin/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/why": {
      "filePath": "why.tsx"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard/route.tsx",
      "children": [
        "/admin/dashboard/"
      ]
    },
    "/admin/login": {
      "filePath": "admin/login.tsx"
    },
    "/admin/dashboard/": {
      "filePath": "admin/dashboard/index.tsx",
      "parent": "/admin/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
